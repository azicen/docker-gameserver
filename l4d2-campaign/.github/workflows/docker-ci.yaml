name: 构建 L4D2 Campaign 容器镜像

on:
  workflow_dispatch: # 手动触发

env:
  REGISTRY: ${{ vars.L4D2_CAMPAIGN_REGISTRY }}
  IMAGE: ${{ vars.L4D2_CAMPAIGN_IMAGE }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    # 这里用于定义 GITHUB_TOKEN 的权限
    permissions:
      packages: write
      contents: read

    steps:
      - name: 设置环境变量
        run: |
          echo "REGISTRY_USERNAME=${{ github.repository_owner }}" >> $GITHUB_ENV

      - name: 检查环境变量
        run: |
          echo "REGISTRY:           ${{ env.REGISTRY }}"
          echo "REGISTRY_USERNAME:  ${{ env.REGISTRY_USERNAME }}"
          echo "IMAGE:              ${{ env.IMAGE }}"

      - name: 检出代码
        uses: actions/checkout@v4
        with:
          ref: ${{ env.GITHUB_REF }}

      - name: 配置容器环境
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: 检查构建器
        run: |
          echo "Name:      ${{ steps.buildx.outputs.name }}"
          echo "Endpoint:  ${{ steps.buildx.outputs.endpoint }}"
          echo "Status:    ${{ steps.buildx.outputs.status }}"
          echo "Flags:     ${{ steps.buildx.outputs.flags }}"
          echo "Platforms: ${{ steps.buildx.outputs.platforms }}"

      - name: 登录容器注册表
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 构建容器元数据
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE }}
          tags: |
            type=raw,value=latest

      - name: 检查容器元数据
        run: |
          echo "docker iamge version: ${{ steps.meta.outputs.version }}"
          echo ""
          echo "docker iamge tags:"
          echo "${{ steps.meta.outputs.tags }}"
          echo ""
          echo "docker iamge labels:"
          echo "${{ steps.meta.outputs.labels }}"

      - name: 构建容器并推送注册表
        uses: docker/build-push-action@v6
        with:
          context: ./l4d2-campaign
          file: ./l4d2-campaign/Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          platforms: |
            linux/amd64
          outputs: type=registry,push=true,compression=gzip,compression-level=9
          provenance: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: 检查镜像
        run: |
          docker buildx imagetools inspect \
          ${{ env.REGISTRY }}/${{ env.IMAGE }}:${{ steps.meta.outputs.version }}
